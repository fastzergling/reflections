import os
import re
import random
import hashlib
import hmac
import logging
import json
from datetime import datetime, timedelta
from string import letters

import webapp2
import jinja2

from google.appengine.ext import db
from google.appengine.api import memcache

template_dir = os.path.join(os.path.dirname(__file__), 'templates')
jinja_env = jinja2.Environment(loader = jinja2.FileSystemLoader(template_dir),
                               autoescape = True)

secret = 'fart'

def make_secure_val(val):
    return '%s|%s' % (val, hmac.new(secret, val).hexdigest())

def check_secure_val(secure_val):
    val = secure_val.split('|')[0]
    if secure_val == make_secure_val(val):
        return val
        

##### Password Stuff
def make_salt(length = 5):
    return ''.join(random.choice(letters) for x in xrange(length))

def make_pw_hash(name, pw, salt = None):
    if not salt:
        salt = make_salt()
    h = hashlib.sha256(name + pw + salt).hexdigest()
    return '%s,%s' % (salt, h)

def valid_pw(name, password, h):
    salt = h.split(',')[0]
    return h == make_pw_hash(name, password, salt)

def users_key(group = 'default'):
    return db.Key.from_path('users', group)

#### Login Stuff    
    
USER_RE = re.compile(r"^[a-zA-Z0-9_-]{3,20}$")
def valid_username(username):
    return username and USER_RE.match(username)

PASS_RE = re.compile(r"^.{3,20}$")
def valid_password(password):
    return password and PASS_RE.match(password)

EMAIL_RE  = re.compile(r'^[\S]+@[\S]+\.[\S]+$')
def valid_email(email):
    return not email or EMAIL_RE.match(email)

PAGE_RE = r'(/(?:[a-zA-Z0-9_-]+/?)*)'
         
         

def gray_style(lst):
    for n, x in enumerate(lst):
        if n % 2 == 0:
            yield x, ''
        else:
            yield x, 'gray'         

            

def personal_notes():
     
    #Get all the comments of an author
    user_temp = data.User.all().filter("name =", "ww2").get()
    c = data.Comment.all().filter("author =", user_temp).order('created')

    #Get all the comments of an author (using the implicit collection names)
    comment_page = data.User.all().filter("name =", "ww2").get().comment_set
    
    #Get all the comments of an author on a particular page
    user_temp = data.User.all().filter("name =", "ffa").get()
    comment_page = data.Comment.by_path(path).filter("author =", user_temp)            
    
    #Get the name of the author of the comment
    c.author.name            
            
    #Get the key generated by google app engine
    db.key.from_path
    
    #Get the key id generated by google app engine
    key().id()

    #Get the element corresponding to the key
    get_by_id(ids, parent=None)
    get(keys) #if we use a name for the key

    #various tries
    subcomment_page = data.SubComment.by_path(path)
    subcomment_page = list(subcomment_page)
    
    comment_page = comment_page + subcomment_page

    temp_list = []
        
    for c in comment_page:
        temp_list.append(c)
        
        logging.error(str(c))
        logging.error(str(c.key().id()))
        
        d = data.SubComment.by_path_comment(path, int(c.key().id()))
        logging.error(str(d))
        
        temp_list.append(d)            
    
    comment_page = list(temp_list)     























      
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            